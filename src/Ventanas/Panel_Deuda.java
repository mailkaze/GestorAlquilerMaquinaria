/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import Clases.ColorearTablas;
import Clases.General;
import java.awt.Color;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;

/**
 *
 * @author Kaze
 */
public class Panel_Deuda extends javax.swing.JPanel {
public void cargartablaDeuda() throws IOException{
    General.ModeloTablaDeuda.setRowCount(0);
    General.ModeloTablaDeuda.setColumnCount(0);
    tablaDeuda.setModel(Clases.General.ModeloTablaDeuda);
    General.ModeloTablaDeuda.addColumn("ID");
    General.ModeloTablaDeuda.addColumn("Cliente");
    General.ModeloTablaDeuda.addColumn("Fecha Entrega");
    General.ModeloTablaDeuda.addColumn("Cobrado por");
    General.ModeloTablaDeuda.addColumn("Monto");
    tablaDeuda.setModel(Clases.General.ModeloTablaDeuda); //Asignamos el Modelo a la tablaDeuda.
}
public void calcularDeuda() throws FileNotFoundException, IOException, ParseException{
        General.ModeloTablaDeuda.setRowCount(0);
        tablaDeuda.setModel(Clases.General.ModeloTablaDeuda);
        POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream("SokolmetDB"));
        HSSFWorkbook libro = new HSSFWorkbook(fs);
        HSSFSheet Clientes = libro.getSheetAt(0);
        HSSFSheet Alquileres = libro.getSheetAt(1);
        int NumClientes = Clientes.getLastRowNum();
        int NumAlquileres = Alquileres.getLastRowNum();
        double total=0.0, superTotal=0.0;
        Object Datos[]=new Object[5]; //Numero de columnas de la tablaDeuda, es un Array de objetos.
        for (int i=1;i<=NumAlquileres;i++){//recorre las filas
            if (Alquileres.getRow(i).getCell(25).getBooleanCellValue()==true){
                Datos[0]=(int)Alquileres.getRow(i).getCell(0).getNumericCellValue();
                //Dejamos la posición 1 para el final pues necesita una pequeña búsqueda.
                Datos[2]=Alquileres.getRow(i).getCell(23);
                Datos[3]=Alquileres.getRow(i).getCell(27);
                //sumamos los 6 montos del alquiler.
                total=((double)Alquileres.getRow(i).getCell(6).getNumericCellValue()
                     +(double)Alquileres.getRow(i).getCell(9).getNumericCellValue()
                     +(double)Alquileres.getRow(i).getCell(12).getNumericCellValue()
                     +(double)Alquileres.getRow(i).getCell(15).getNumericCellValue()
                     +(double)Alquileres.getRow(i).getCell(18).getNumericCellValue()
                     +(double)Alquileres.getRow(i).getCell(21).getNumericCellValue())
                     *(int)Alquileres.getRow(i).getCell(26).getNumericCellValue();
                superTotal+=total;
                Datos[4]=General.redondear(total);
                for (int j=1;j<=NumClientes;j++){
                    if (Clientes.getRow(j).getCell(0).getNumericCellValue()==Alquileres.getRow(i).getCell(1).getNumericCellValue()){
                        //Buscamos el cliente que tiene el ID del alquiler que estamos mostrando
                        //Cargamos el campo de la lista con el Nombre y los Apellidos
                        Datos[1]=Clientes.getRow(j).getCell(1)+ " " + Clientes.getRow(j).getCell(2);
                    }
                }
                General.ModeloTablaDeuda.addRow(Datos); //Añadimos una fila con el Array Datos.
            }
        tablaDeuda.setModel(Clases.General.ModeloTablaDeuda); //Asignamos el Modelo a la tablaDeuda.
        ColorearTablas ColTab = new ColorearTablas(2,true);
        tablaDeuda.setDefaultRenderer (Object.class, ColTab);
        lblTotal.setText(String.valueOf(General.redondear(superTotal)));
        }
    }
    /**
     * Creates new form Panel_Deuda
     */
    public Panel_Deuda() throws IOException {
        initComponents();
        cargartablaDeuda();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmdCalcular = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDeuda = new javax.swing.JTable();
        lblTotal = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("Deuda generada por alquileres aún no pagados:");

        cmdCalcular.setText("Calcular");
        cmdCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCalcularActionPerformed(evt);
            }
        });

        tablaDeuda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaDeuda);

        lblTotal.setText("-");

        jLabel2.setText("Total en Bolivianos: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmdCalcular)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmdCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCalcularActionPerformed
        try {
            calcularDeuda();
        } catch (ParseException ex) {
                Logger.getLogger(Panel_Deuda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Panel_Deuda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Panel_Deuda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmdCalcularActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCalcular;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tablaDeuda;
    // End of variables declaration//GEN-END:variables
}
